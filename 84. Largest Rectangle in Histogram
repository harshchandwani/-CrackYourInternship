class Solution {
public:
    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {
        int ans = INT_MIN;
        priority_queue<pair<int,int>>p;
        for(int i=0;i<points.size();i++){
            while( !p.empty() && (points[i][0] - p.top().second) > k)
            {
                p.pop();
            }
                if(!p.empty()){
                    ans = max(ans, points[i][0] + points[i][1] + p.top().first);
                
                }
                p.push({points[i][1] - points[i][0], points[i][0]});
            
        }
        return ans;
    }
};







class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int left[n], right[n];
        stack<int>s;
        
        for(int i=0;i<n;i++){
            while(!s.empty() && heights[s.top()] >= heights[i]){
                s.pop();
            }
            if(s.empty())
                left[i] =0;
            else{
                left[i] = s.top() + 1;
            }
            s.push(i);
        }
        
        while(!s.empty()){
            s.pop();
        }
        for(int i=n-1;i>=0;i--){
            while(!s.empty() && heights[s.top()] >= heights[i]){
                s.pop();
            }
            if(s.empty())
                right[i] =n-1;
            else{
                right[i] = s.top() - 1;
            }
            s.push(i);
        }
        int ans=0;
        for(int i=0;i<n;i++){
            ans = max(ans, (right[i] - left[i] + 1)*heights[i]);
            
        }
        return ans;
    }
};
